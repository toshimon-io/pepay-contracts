/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface JAYInterface extends utils.Interface {
  functions: {
    "BUY_FEE()": FunctionFragment;
    "ETHinWEI()": FunctionFragment;
    "ETHtoJAY(uint256)": FunctionFragment;
    "FEES()": FunctionFragment;
    "FEE_BASE_1000()": FunctionFragment;
    "JAYtoETH(uint256)": FunctionFragment;
    "MAX()": FunctionFragment;
    "MIN()": FunctionFragment;
    "SELL_FEE()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "buy(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit()": FunctionFragment;
    "getBuyJay(uint256)": FunctionFragment;
    "getSellJay(uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sell(uint256)": FunctionFragment;
    "setBuyFee(uint16)": FunctionFragment;
    "setFeeAddress(address)": FunctionFragment;
    "setMax(uint256)": FunctionFragment;
    "setSellFee(uint16)": FunctionFragment;
    "setStart()": FunctionFragment;
    "start()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BUY_FEE"
      | "ETHinWEI"
      | "ETHtoJAY"
      | "FEES"
      | "FEE_BASE_1000"
      | "JAYtoETH"
      | "MAX"
      | "MIN"
      | "SELL_FEE"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "buy"
      | "decimals"
      | "decreaseAllowance"
      | "deposit"
      | "getBuyJay"
      | "getSellJay"
      | "increaseAllowance"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "sell"
      | "setBuyFee"
      | "setFeeAddress"
      | "setMax"
      | "setSellFee"
      | "setStart"
      | "start"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BUY_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ETHinWEI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ETHtoJAY",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "FEES", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FEE_BASE_1000",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JAYtoETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "MAX", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "SELL_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buy", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBuyJay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellJay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sell", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setBuyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setStart", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "BUY_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ETHinWEI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ETHtoJAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FEES", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FEE_BASE_1000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "JAYtoETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SELL_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBuyJay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSellJay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBuyFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSellFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "MaxUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Price(uint256,uint256,uint256)": EventFragment;
    "SellFeeUpdated(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "buyFeeUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Price"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "buyFeeUpdated"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface MaxUpdatedEventObject {
  max: BigNumber;
}
export type MaxUpdatedEvent = TypedEvent<[BigNumber], MaxUpdatedEventObject>;

export type MaxUpdatedEventFilter = TypedEventFilter<MaxUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceEventObject {
  time: BigNumber;
  recieved: BigNumber;
  sent: BigNumber;
}
export type PriceEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PriceEventObject
>;

export type PriceEventFilter = TypedEventFilter<PriceEvent>;

export interface SellFeeUpdatedEventObject {
  sellFee: BigNumber;
}
export type SellFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  SellFeeUpdatedEventObject
>;

export type SellFeeUpdatedEventFilter = TypedEventFilter<SellFeeUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface buyFeeUpdatedEventObject {
  buyFee: BigNumber;
}
export type buyFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  buyFeeUpdatedEventObject
>;

export type buyFeeUpdatedEventFilter = TypedEventFilter<buyFeeUpdatedEvent>;

export interface JAY extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JAYInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BUY_FEE(overrides?: CallOverrides): Promise<[number]>;

    ETHinWEI(overrides?: CallOverrides): Promise<[BigNumber]>;

    ETHtoJAY(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    FEES(overrides?: CallOverrides): Promise<[number]>;

    FEE_BASE_1000(overrides?: CallOverrides): Promise<[number]>;

    JAYtoETH(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    SELL_FEE(overrides?: CallOverrides): Promise<[number]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buy(
      reciever: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBuyJay(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellJay(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sell(
      jay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBuyFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeAddress(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMax(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSellFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setStart(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    start(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BUY_FEE(overrides?: CallOverrides): Promise<number>;

  ETHinWEI(overrides?: CallOverrides): Promise<BigNumber>;

  ETHtoJAY(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  FEES(overrides?: CallOverrides): Promise<number>;

  FEE_BASE_1000(overrides?: CallOverrides): Promise<number>;

  JAYtoETH(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  MAX(overrides?: CallOverrides): Promise<BigNumber>;

  MIN(overrides?: CallOverrides): Promise<BigNumber>;

  SELL_FEE(overrides?: CallOverrides): Promise<number>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buy(
    reciever: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBuyJay(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellJay(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sell(
    jay: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBuyFee(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeAddress(
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMax(
    _max: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSellFee(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setStart(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  start(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BUY_FEE(overrides?: CallOverrides): Promise<number>;

    ETHinWEI(overrides?: CallOverrides): Promise<BigNumber>;

    ETHtoJAY(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    FEES(overrides?: CallOverrides): Promise<number>;

    FEE_BASE_1000(overrides?: CallOverrides): Promise<number>;

    JAYtoETH(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX(overrides?: CallOverrides): Promise<BigNumber>;

    MIN(overrides?: CallOverrides): Promise<BigNumber>;

    SELL_FEE(overrides?: CallOverrides): Promise<number>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(reciever: string, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(overrides?: CallOverrides): Promise<void>;

    getBuyJay(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellJay(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sell(jay: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setBuyFee(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    setMax(_max: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSellFee(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setStart(overrides?: CallOverrides): Promise<void>;

    start(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "MaxUpdated(uint256)"(max?: null): MaxUpdatedEventFilter;
    MaxUpdated(max?: null): MaxUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Price(uint256,uint256,uint256)"(
      time?: null,
      recieved?: null,
      sent?: null
    ): PriceEventFilter;
    Price(time?: null, recieved?: null, sent?: null): PriceEventFilter;

    "SellFeeUpdated(uint256)"(sellFee?: null): SellFeeUpdatedEventFilter;
    SellFeeUpdated(sellFee?: null): SellFeeUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "buyFeeUpdated(uint256)"(buyFee?: null): buyFeeUpdatedEventFilter;
    buyFeeUpdated(buyFee?: null): buyFeeUpdatedEventFilter;
  };

  estimateGas: {
    BUY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    ETHinWEI(overrides?: CallOverrides): Promise<BigNumber>;

    ETHtoJAY(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    FEES(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_BASE_1000(overrides?: CallOverrides): Promise<BigNumber>;

    JAYtoETH(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX(overrides?: CallOverrides): Promise<BigNumber>;

    MIN(overrides?: CallOverrides): Promise<BigNumber>;

    SELL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buy(
      reciever: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getBuyJay(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellJay(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sell(
      jay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBuyFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeAddress(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMax(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSellFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setStart(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BUY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETHinWEI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETHtoJAY(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_BASE_1000(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    JAYtoETH(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SELL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buy(
      reciever: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBuyJay(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellJay(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sell(
      jay: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBuyFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMax(
      _max: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSellFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setStart(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
